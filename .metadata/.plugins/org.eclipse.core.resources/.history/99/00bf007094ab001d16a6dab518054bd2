package Page;

import org.apache.commons.io.FileUtils;
import org.apache.commons.lang3.exception.ExceptionUtils;
import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.FindBy;
import org.openqa.selenium.support.PageFactory;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.testng.asserts.SoftAssert;

import Base.Base;

import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Random;

public class Bot_Page1 extends Base {
   
    Actions action;

    //======================= Define all Elements ========================
    @FindBy(xpath = "//*[@id=\"u_0_b\"]")
    private WebElement logInButton;
    
    @FindBy(xpath = "//div[@class='avm-bot-welcome-notification animated fadeInUp']")
    private WebElement bot_icon;
    
    @FindBy(xpath = "//a[@class='get-started-link']")
    private WebElement start_button;
    
    @FindBy(xpath="//iframe[@name='avaamoIframe']")
    WebElement iframe_bot;
    
    @FindBy(xpath= "//input[@id='first_name']")
    private WebElement first_name;
    
    @FindBy(xpath= "//input[@id='email']")
    private WebElement email;
    
    @FindBy(xpath="//button[@type='submit']")
    WebElement next_button;
    
    @FindBy(xpath="//div[@class='media-body']//h1[@class='name']")
    private List<WebElement> header_text;
    
    @FindBy(xpath="//div[@class='media-body']//img")
    private List<WebElement> bot_initial_img;
    
    @FindBy(xpath="//textarea[@name='message']")
    WebElement type_msg;
    
   @FindBy(xpath="//button[@aria-label='Send']")
   WebElement send_button;
   
   
   @FindBy(xpath="//a[@aria-label='veg']")
   WebElement veg;
   
   
   @FindBy(xpath="//div[@class='composer__container__preview__container__options']/label[1]")
   WebElement cheese;
   
   @FindBy(xpath="//button[@aria-label='Submit']")
   WebElement button_submit;
   
   @FindBy(xpath="//div[contains(@class,'card_carousel ')]")
   List<WebElement> carousels;

   @FindBy(xpath="//div[@class='default_card_input']//label")
   List<WebElement> labels;
   
   
   
    public Bot_Page1(WebDriver driver) {
        Base.driver = driver;     
        action = new Actions(driver);
        PageFactory.initElements(driver, this);
    }

    
    public void openBot()
    {
        driver.get("https://c6.avaamo.com/web_channels/c767654d-6709-43f6-bb0c-ce1d2c559f6a/demo.html?banner=true&demo=true&banner_text=%20&banner_title=This%20is%20how%20the%20chat%20agent%20shows%20up");
    }
    
    public void login_bot() throws InterruptedException
    {
    	bot_icon.click();
    	start_button.click();
    	driver.switchTo().frame(iframe_bot);
    	  wait.until(ExpectedConditions.visibilityOf(first_name));
   	  first_name.click();
    	  first_name.sendKeys("Manu");
    	//  email.click();
    	  email.sendKeys("minakshikundu86@gmail.com");
    	  next_button.click();     
    	
    }
    
    public boolean verify_bot_firstScreen()
    {
    	boolean f= false;
    	 if (header_text.size() > 0 && bot_initial_img.size() >0) {
    		 
    		 log.info("First screen is opened after login");
             f= true;
          }else {
        	  log.info("First screen is not opened after login");
             f= false;
          }
		return f;	
    }
    
    
    public void type_message()
    {   	
    	type_msg.sendKeys("I want to order a pizza");
    	send_button.click();
    	veg.click();
    	
    	// check that card is displaying with 2 options having checkbox and text on each
    	System.out.println("label size is : "+labels.size());
    	for ( int i=0; i<labels.size();i++)
    	{
    		WebElement checkbox= labels.get(i).findElement(By.xpath(".//input"));
    		checkbox.click();
    		WebElement text= labels.get(i).findElement(By.xpath(".//span[2]"));
    	}
    	button_submit.click();
    }
    
    
    public void verifyCarousals()
    {   	
    
    	int size= carousels.size();
    	Assert.assertEquals(size, 2);
    			
    	// Check Other components of carousals
    	
    		try
    		{
    		for ( int i=0; i<size; i++)
    		{
    			WebElement carousel_title= carousels.get(1).findElement(By.xpath(".//div[@class='default_card_title']"));
    			String pizza_name= carousel_title.getText();
    			// Assert Name here > assert.assertEquals()
    			
    			WebElement carousel_image= carousels.get(1).findElement(By.xpath(".//img"));
    			int height=  Integer.parseInt(carousel_image.getAttribute("width"));
    			int width= Integer.parseInt(carousel_image.getAttribute("height"));
    			// Assert Height and Width here > assert.assertEquals()
    			
    			WebElement carousel_link= carousels.get(1).findElement(By.xpath(".//div[@class='default_card_link']/a"));
    			String href= carousel_link.getAttribute("href");
    			// Assert href  > assert.assertEquals()
    		}  		
    		}
    		catch(Exception e)
    		{
    			log.error("Exception is : "+ExceptionUtils.getStackTrace(e));
    		}
    	
    }
   

    /*
    Take Screenshot and save in logPath folder
     */
    public boolean takeScreenshot(String filePath, String fileName) {
        log.info("Screenshot filePath: " + filePath + " fileName: " + fileName);
        try {
            File screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.FILE);
            FileUtils.copyFile(screenshot, new File(filePath + "/" + fileName));
            return true;

        } catch (IOException e) {
            log.debug("Failed to take screenshot");
            return false;
        }
    }

   

   
    
}
