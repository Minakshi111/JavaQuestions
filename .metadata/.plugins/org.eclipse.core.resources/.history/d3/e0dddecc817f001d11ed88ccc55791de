package Two_D_Array;

import java.util.Scanner;

public class Nearest_exit_from_entrance {
	public static void main(String[] str)
	{
		
	
	
	Scanner sc= new Scanner(System.in);
	int n=3;
	
	char[][] arr= new char[n][n];
	int [][] visited= new int[n][n];
	
	
	
	for ( int i=0; i<n;i++)
	{
		
			String st= sc.nextLine();
			String[] ch= st.split(" ");
			
			for ( int k=0; k<ch.length;k++)
			{
				String s= ch[k];			
				arr[i][k]= s.charAt(0);
			}
			
	}
	
	
	
	int max= func(arr, 0, 0, 0, 0,0, visited);
	
	}

	private static int func(char[][] arr, int n, int i, int j, int count, int max,  int[][] visited) {
		// exit condition
		
		if(i==0 || i== (n-1) || j==0 || j==(n-1))
		{
			if(max<count)
				max= count;
			
			return max;
			
		}
		
		// cover other all condition
		
		if(i+1<n && arr[i+1][j]=='.' && visited[i+1][j]==0)
		{
			
			visited[i+1][j]=1;
			max= func(arr, n, i+1, j, count+1,max, visited);
			visited[i+1][j]=0;
			
		}
		
		if(j+1<n && arr[i][j+1]==1 && visited[i][j+1]==0)
		{
			
			visited[i][j+1]=1;
			max= rat(arr,n,i,j+1,count+1,visited,path, max);
			visited[i][j+1]=0;
			
		}
		
		if(j-1>=0 && arr[i][j-1]==1 && visited[i][j-1]==0)
		{
			
			visited[i][j-1]=1;
			max= rat(arr,n,i,j-1,count+1,visited,path,max);
			visited[i][j-1]=0;
			
		}
		
		if(i-1>=0 && arr[i-1][j]==1 && visited[i-1][j]==0)
		{
			
			visited[i-1][j]=1;
			max= rat(arr,n,i-1,j,count+1,visited,path, max);
			visited[i-1][j]=0;
			
		}
		
		
		
		
	
		return max;
	}

}
